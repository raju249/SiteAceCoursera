{"version":3,"sources":["meteor://ðŸ’»app/packages/rzymek_moment-locale-lb/packages/rzymek_moment-locale-lb.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/rzymek_moment-locale-lb.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/rzymek:moment-locale-lb/server.js                                                                      //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nglobal.moment = moment;                                                                                            // 1\n                                                                                                                   // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/rzymek:moment-locale-lb/locale.js                                                                      //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n// moment.js locale configuration                                                                                  // 1\n// locale : Luxembourgish (lb)                                                                                     // 2\n// author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz            // 3\n                                                                                                                   // 4\n// Note: Luxembourgish has a very particular phonological rule ('Eifeler Regel') that causes the                   // 5\n// deletion of the final 'n' in certain contexts. That's what the 'eifelerRegelAppliesToWeekday'                   // 6\n// and 'eifelerRegelAppliesToNumber' methods are meant for                                                         // 7\n                                                                                                                   // 8\n(function (factory) {                                                                                              // 9\n    if (typeof define === 'function' && define.amd) {                                                              // 10\n        define(['moment'], factory); // AMD                                                                        // 11\n    } else if (typeof exports === 'object') {                                                                      // 12\n        module.exports = factory(require('../moment')); // Node                                                    // 13\n    } else {                                                                                                       // 14\n        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global                   // 15\n    }                                                                                                              // 16\n}(function (moment) {                                                                                              // 17\n    function processRelativeTime(number, withoutSuffix, key, isFuture) {                                           // 18\n        var format = {                                                                                             // 19\n            'm': ['eng Minutt', 'enger Minutt'],                                                                   // 20\n            'h': ['eng Stonn', 'enger Stonn'],                                                                     // 21\n            'd': ['een Dag', 'engem Dag'],                                                                         // 22\n            'M': ['ee Mount', 'engem Mount'],                                                                      // 23\n            'y': ['ee Joer', 'engem Joer']                                                                         // 24\n        };                                                                                                         // 25\n        return withoutSuffix ? format[key][0] : format[key][1];                                                    // 26\n    }                                                                                                              // 27\n                                                                                                                   // 28\n    function processFutureTime(string) {                                                                           // 29\n        var number = string.substr(0, string.indexOf(' '));                                                        // 30\n        if (eifelerRegelAppliesToNumber(number)) {                                                                 // 31\n            return 'a ' + string;                                                                                  // 32\n        }                                                                                                          // 33\n        return 'an ' + string;                                                                                     // 34\n    }                                                                                                              // 35\n                                                                                                                   // 36\n    function processPastTime(string) {                                                                             // 37\n        var number = string.substr(0, string.indexOf(' '));                                                        // 38\n        if (eifelerRegelAppliesToNumber(number)) {                                                                 // 39\n            return 'viru ' + string;                                                                               // 40\n        }                                                                                                          // 41\n        return 'virun ' + string;                                                                                  // 42\n    }                                                                                                              // 43\n                                                                                                                   // 44\n    /**                                                                                                            // 45\n     * Returns true if the word before the given number loses the '-n' ending.                                     // 46\n     * e.g. 'an 10 Deeg' but 'a 5 Deeg'                                                                            // 47\n     *                                                                                                             // 48\n     * @param number {integer}                                                                                     // 49\n     * @returns {boolean}                                                                                          // 50\n     */                                                                                                            // 51\n    function eifelerRegelAppliesToNumber(number) {                                                                 // 52\n        number = parseInt(number, 10);                                                                             // 53\n        if (isNaN(number)) {                                                                                       // 54\n            return false;                                                                                          // 55\n        }                                                                                                          // 56\n        if (number < 0) {                                                                                          // 57\n            // Negative Number --> always true                                                                     // 58\n            return true;                                                                                           // 59\n        } else if (number < 10) {                                                                                  // 60\n            // Only 1 digit                                                                                        // 61\n            if (4 <= number && number <= 7) {                                                                      // 62\n                return true;                                                                                       // 63\n            }                                                                                                      // 64\n            return false;                                                                                          // 65\n        } else if (number < 100) {                                                                                 // 66\n            // 2 digits                                                                                            // 67\n            var lastDigit = number % 10, firstDigit = number / 10;                                                 // 68\n            if (lastDigit === 0) {                                                                                 // 69\n                return eifelerRegelAppliesToNumber(firstDigit);                                                    // 70\n            }                                                                                                      // 71\n            return eifelerRegelAppliesToNumber(lastDigit);                                                         // 72\n        } else if (number < 10000) {                                                                               // 73\n            // 3 or 4 digits --> recursively check first digit                                                     // 74\n            while (number >= 10) {                                                                                 // 75\n                number = number / 10;                                                                              // 76\n            }                                                                                                      // 77\n            return eifelerRegelAppliesToNumber(number);                                                            // 78\n        } else {                                                                                                   // 79\n            // Anything larger than 4 digits: recursively check first n-3 digits                                   // 80\n            number = number / 1000;                                                                                // 81\n            return eifelerRegelAppliesToNumber(number);                                                            // 82\n        }                                                                                                          // 83\n    }                                                                                                              // 84\n                                                                                                                   // 85\n    return moment.defineLocale('lb', {                                                                             // 86\n        months: 'Januar_Februar_MÃ¤erz_AbrÃ«ll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'), // 87\n        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),                    // 88\n        weekdays: 'Sonndeg_MÃ©indeg_DÃ«nschdeg_MÃ«ttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),                   // 89\n        weekdaysShort: 'So._MÃ©._DÃ«._MÃ«._Do._Fr._Sa.'.split('_'),                                                   // 90\n        weekdaysMin: 'So_MÃ©_DÃ«_MÃ«_Do_Fr_Sa'.split('_'),                                                            // 91\n        longDateFormat: {                                                                                          // 92\n            LT: 'H:mm [Auer]',                                                                                     // 93\n            LTS: 'H:mm:ss [Auer]',                                                                                 // 94\n            L: 'DD.MM.YYYY',                                                                                       // 95\n            LL: 'D. MMMM YYYY',                                                                                    // 96\n            LLL: 'D. MMMM YYYY LT',                                                                                // 97\n            LLLL: 'dddd, D. MMMM YYYY LT'                                                                          // 98\n        },                                                                                                         // 99\n        calendar: {                                                                                                // 100\n            sameDay: '[Haut um] LT',                                                                               // 101\n            sameElse: 'L',                                                                                         // 102\n            nextDay: '[Muer um] LT',                                                                               // 103\n            nextWeek: 'dddd [um] LT',                                                                              // 104\n            lastDay: '[GÃ«schter um] LT',                                                                           // 105\n            lastWeek: function () {                                                                                // 106\n                // Different date string for 'DÃ«nschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule\n                switch (this.day()) {                                                                              // 108\n                    case 2:                                                                                        // 109\n                    case 4:                                                                                        // 110\n                        return '[Leschten] dddd [um] LT';                                                          // 111\n                    default:                                                                                       // 112\n                        return '[Leschte] dddd [um] LT';                                                           // 113\n                }                                                                                                  // 114\n            }                                                                                                      // 115\n        },                                                                                                         // 116\n        relativeTime : {                                                                                           // 117\n            future : processFutureTime,                                                                            // 118\n            past : processPastTime,                                                                                // 119\n            s : 'e puer Sekonnen',                                                                                 // 120\n            m : processRelativeTime,                                                                               // 121\n            mm : '%d Minutten',                                                                                    // 122\n            h : processRelativeTime,                                                                               // 123\n            hh : '%d Stonnen',                                                                                     // 124\n            d : processRelativeTime,                                                                               // 125\n            dd : '%d Deeg',                                                                                        // 126\n            M : processRelativeTime,                                                                               // 127\n            MM : '%d MÃ©int',                                                                                       // 128\n            y : processRelativeTime,                                                                               // 129\n            yy : '%d Joer'                                                                                         // 130\n        },                                                                                                         // 131\n        ordinalParse: /\\d{1,2}\\./,                                                                                 // 132\n        ordinal: '%d.',                                                                                            // 133\n        week: {                                                                                                    // 134\n            dow: 1, // Monday is the first day of the week.                                                        // 135\n            doy: 4  // The week that contains Jan 4th is the first week of the year.                               // 136\n        }                                                                                                          // 137\n    });                                                                                                            // 138\n}));                                                                                                               // 139\n                                                                                                                   // 140\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}